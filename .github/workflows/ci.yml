name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  EXPO_VERSION: 'latest'

jobs:
  # Lint and Type Check
  lint-and-typecheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd web && npm ci
          cd ../mobile && npm ci
          cd ../shared && npm ci

      - name: Lint web app
        run: |
          cd web
          npm run lint

      - name: Lint mobile app
        run: |
          cd mobile
          npm run lint

      - name: Type check web app
        run: |
          cd web
          npm run type-check

      - name: Type check mobile app
        run: |
          cd mobile
          npm run type-check

  # Test
  test:
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    strategy:
      matrix:
        project: [web, mobile, shared]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd web && npm ci
          cd ../mobile && npm ci
          cd ../shared && npm ci

      - name: Run tests for ${{ matrix.project }}
        run: |
          cd ${{ matrix.project }}
          npm test -- --coverage --watchAll=false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./${{ matrix.project }}/coverage/lcov.info
          flags: ${{ matrix.project }}
          name: ${{ matrix.project }}-coverage

  # Build Web App
  build-web:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd web && npm ci

      - name: Setup environment variables
        run: |
          cd web
          cp env.example .env.local

      - name: Build web app
        run: |
          cd web
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: web/.next

  # Build Mobile App
  build-mobile:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd mobile && npm ci

      - name: Setup Expo CLI
        run: |
          npm install -g @expo/cli@${{ env.EXPO_VERSION }}

      - name: Setup environment variables
        run: |
          cd mobile
          cp env.example .env

      - name: Build mobile app
        run: |
          cd mobile
          npx expo export --platform all

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mobile-build
          path: mobile/dist

  # Deploy to Firebase (Web)
  deploy-web:
    runs-on: ubuntu-latest
    needs: build-web
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd web && npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: web/.next

      - name: Setup Firebase CLI
        run: npm install -g firebase-tools

      - name: Deploy to Firebase
        run: |
          firebase deploy --only hosting --project ${{ secrets.FIREBASE_PROJECT_ID }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  # Deploy to Expo (Mobile)
  deploy-mobile:
    runs-on: ubuntu-latest
    needs: build-mobile
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd mobile && npm ci

      - name: Setup Expo CLI
        run: |
          npm install -g @expo/cli@${{ env.EXPO_VERSION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: mobile-build
          path: mobile/dist

      - name: Deploy to Expo
        run: |
          cd mobile
          npx expo publish --release-channel production
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd web && npm ci
          cd ../mobile && npm ci

      - name: Run security audit
        run: |
          npm audit --audit-level moderate
          cd web && npm audit --audit-level moderate
          cd ../mobile && npm audit --audit-level moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Performance Test
  performance-test:
    runs-on: ubuntu-latest
    needs: build-web
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd web && npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: web/.next

      - name: Start web server
        run: |
          cd web
          npm start &
          sleep 30

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun

  # Notify on completion
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-web, deploy-mobile, security-scan, performance-test]
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always() 