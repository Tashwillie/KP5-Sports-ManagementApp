services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: kp5-postgres
    environment:
      POSTGRES_DB: kp5_academy
      POSTGRES_USER: kp5_user
      POSTGRES_PASSWORD: kp5_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - kp5-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kp5_user -d kp5_academy"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: kp5-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - kp5-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: kp5-backend
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://kp5_user:kp5_password@postgres:5432/kp5_academy
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      PORT: 3001
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - kp5-network
    volumes:
      - ./uploads:/app/uploads
    restart: unless-stopped

  # Nginx reverse proxy (optional) - commented out for now
  # nginx:
  #   image: nginx:alpine
  #   container_name: kp5-nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./nginx/ssl:/etc/nginx/ssl
  #   depends_on:
  #     - backend
  #   networks:
  #     - kp5-network
  #   restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  kp5-network:
    driver: bridge 